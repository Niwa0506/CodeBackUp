(define diff
  (lambda (x)
  (cond ((number? x) 0)
        ((equal? 'x x) 1)
        ((equal? (car x) '+) (cons '+ (map diff (cdr x))))
        ((equal? (car x) '-) (cons '- (map diff (cdr x))))
        ((equal? (car x) '*) (list '+ (list '* (cadr x) (diff (caddr x))) (list '* (diff (cadr x)) (caddr x))))
        ((equal? (car x) '**) (if (equal? (caddr x) 'x) (list '* (caddr x) (list '** (cadr x)  `(- ,(caddr x) 1)))
                                  (list '* (caddr x) (list '* (diff (cadr x)) (list '** (cadr x)  (- (caddr x) 1)))))))
 )
)
(define ** expt)
(define tangent
  (lambda (f a)
    (let ((fx ((eval `(lambda (x) ,f) (interaction-environment)) a))(fdx ((eval `(lambda (x) ,(diff f)) (interaction-environment)) a)))
       (list '+ (list '* fdx 'x) (- fx (* a fdx))))
       ))

(define diff2
  (lambda (x y)
    (cond ((number? x) 0)
        ((equal?  x y) 1)
        ((pair? x)
        (cond ((equal? (car x) '+) (cons '+ (map (lambda (l) (diff2 l y))(cdr x))))
        ((equal? (car x) '-) (cons '- (map (lambda (l) (diff2 l y))(cdr x))))
        ((equal? (car x) '*) (list '+ (list '* (cadr x) (diff2 (caddr x) y)) (list '* (diff2 (cadr x) y) (caddr x))))
        ((equal? (car x) '**) (if (equal? (caddr x) y) (list '* (caddr x) (list '** (cadr x) `(- ,(caddr x) 1)))
                               (list '* (caddr x) (list '* (diff2 (cadr x) y) (list '** (cadr x) (- (caddr x) 1)))))
        )))
        (else 0))
    )
)

(define simple+
  (lambda (lst)
    (let ((non-zero-list (delete 0 lst)))
    (cond ((null? non-zero-list) 0)
          ((null? (cdr non-zero-list)) (car non-zero-list))
          (else (cons '+ non-zero-list))
    )
    )
  )
)

(define simple-
  (lambda (lst)
    (let ((non-zero-list (delete 0 lst)))
    (cond ((null? non-zero-list) (car lst))
          ((null? (cdr non-zero-list)) (car non-zero-list))
          (else (append `(- ,(car lst)) non-zero-list))
    )
    )
  )
)

(define simple*
  (lambda (lst)
    (let ((p (car lst)) (q (cadr lst)))
         (cond ((equal? q 0) 0)
               ((equal? p 0) 0)
               ((equal? p 1) q)
               ((equal? q 1) p)
               (else (cons '* lst))
          )
    )
  )
)

(define simple**
  (lambda (lst)
    (let ((p (car lst)) (q (cadr lst)))
         (cond ((equal? q 0) 1)
               ((equal? q 1) p)
               (else (cons '** lst))
          )
    )
  )
)

(define simple
  (lambda (lst)
    (cond ((number? lst) lst)
          ((symbol? lst) lst)
          ((equal? (car lst) '+) (simple+ (map simple (cdr lst))))
          ((equal? (car lst) '-) (simple- (map simple (cdr lst))))
          ((equal? (car lst) '*) (simple* (map simple (cdr lst))))
          ((equal? (car lst) '**) (simple** (map simple (cdr lst))))
    )
  )                                                  
)


(define delete
  (lambda (n list)
    (cond
      ((null? list) list)
      ((equal? n (car list)) (delete n (cdr list)))
      (else (cons (car list) (delete n (cdr list)))
      )
    )
  )
)